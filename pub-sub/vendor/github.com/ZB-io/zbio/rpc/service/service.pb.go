// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	fmt "fmt"
	common "github.com/ZB-io/zbio/rpc/common"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x51, 0x6b, 0xda, 0x50,
	0x1c, 0xc5, 0xe7, 0xcb, 0xc6, 0xfe, 0x41, 0x98, 0x77, 0xb0, 0x87, 0x0c, 0xb6, 0xa9, 0x73, 0x93,
	0xb1, 0x25, 0x63, 0xfb, 0x04, 0xd5, 0x16, 0x5f, 0x6c, 0x15, 0xb5, 0x50, 0x2c, 0x2d, 0x98, 0xf8,
	0x4f, 0x1a, 0x6a, 0xbc, 0x69, 0xee, 0x4d, 0x4b, 0xfb, 0x2d, 0xfa, 0x8d, 0x4b, 0xbc, 0xde, 0xe4,
	0x86, 0x5e, 0x35, 0xb6, 0x4f, 0x22, 0xe7, 0x9c, 0xdf, 0x89, 0x9e, 0x3f, 0x81, 0x2a, 0xc3, 0xf8,
	0x36, 0x70, 0xd1, 0x8a, 0x62, 0xca, 0x29, 0x21, 0x0f, 0x4e, 0x40, 0xad, 0x98, 0x52, 0xc6, 0xad,
	0xb5, 0x62, 0x7e, 0x74, 0x69, 0x18, 0xd2, 0xa5, 0x2d, 0x3e, 0x84, 0xd1, 0xfc, 0xec, 0x53, 0xea,
	0x2f, 0xd0, 0x5e, 0x7d, 0x73, 0x12, 0xcf, 0xc6, 0x30, 0xe2, 0xf7, 0x42, 0xfc, 0xf7, 0x08, 0xf0,
	0x6e, 0x2c, 0xd2, 0x64, 0x08, 0xc6, 0x04, 0x19, 0x3f, 0x46, 0xc6, 0x66, 0x3e, 0x92, 0x2f, 0x96,
	0xd2, 0xb0, 0x26, 0xa6, 0xfa, 0x08, 0x6f, 0x12, 0x64, 0xdc, 0xfc, 0xba, 0x51, 0x67, 0x11, 0x5d,
	0x32, 0x6c, 0xbc, 0x21, 0x23, 0x30, 0xba, 0x31, 0xce, 0x38, 0x4e, 0x68, 0x14, 0xb8, 0x44, 0x9b,
	0x48, 0x15, 0x89, 0xfc, 0xb6, 0xd9, 0x90, 0x31, 0xcf, 0xc0, 0x38, 0x8d, 0xe6, 0xe5, 0x99, 0x3f,
	0x34, 0x06, 0x05, 0xa0, 0x90, 0x2f, 0xc1, 0x38, 0xc4, 0x05, 0x4a, 0x72, 0x4b, 0x13, 0x54, 0xf4,
	0x6d, 0xfc, 0x82, 0x2d, 0xe3, 0x0f, 0xe0, 0x7d, 0x3f, 0x60, 0x5c, 0xd0, 0x3f, 0x59, 0x62, 0x16,
	0x4b, 0xce, 0x62, 0x1d, 0xa5, 0xb3, 0x98, 0x6d, 0x2d, 0x8e, 0xb9, 0x71, 0xe0, 0x3c, 0x03, 0xce,
	0xa1, 0x5a, 0x90, 0xc8, 0xcf, 0xdd, 0x61, 0xf1, 0xd0, 0xfb, 0xb4, 0x9c, 0x03, 0x9c, 0xe0, 0x9d,
	0xbc, 0x8a, 0xef, 0x9a, 0x64, 0x2e, 0x4b, 0x7e, 0x6b, 0x87, 0x4b, 0x59, 0x13, 0x7a, 0x98, 0x9d,
	0x5c, 0x5d, 0x13, 0x2b, 0x41, 0xce, 0x09, 0x45, 0xf2, 0x81, 0x7b, 0xfd, 0x4a, 0x72, 0x4e, 0x50,
	0xc8, 0x17, 0x60, 0x0c, 0x11, 0x33, 0xb4, 0x2e, 0xa7, 0xe8, 0x7b, 0x3f, 0xb8, 0x03, 0xb5, 0x71,
	0xe2, 0x88, 0x2d, 0xba, 0x74, 0xc9, 0x92, 0x10, 0x63, 0xd2, 0xd0, 0xa4, 0xa5, 0x28, 0x1b, 0x9a,
	0x5b, 0x3d, 0x92, 0xdf, 0xae, 0xfc, 0xad, 0x10, 0x84, 0x0f, 0x72, 0xee, 0xac, 0xe2, 0xd7, 0x96,
	0x9b, 0x78, 0x59, 0x15, 0xe9, 0x83, 0xd1, 0x43, 0x9e, 0x35, 0x6c, 0xba, 0xf9, 0x92, 0x34, 0x0f,
	0x6a, 0x0a, 0x6d, 0xe0, 0x79, 0x0c, 0x79, 0x99, 0x61, 0x7f, 0xeb, 0xff, 0xf9, 0x22, 0x28, 0xef,
	0xe9, 0x34, 0xa7, 0x75, 0x3f, 0xe0, 0x57, 0x89, 0x93, 0x9a, 0xed, 0x69, 0xe7, 0x4f, 0x40, 0xed,
	0x94, 0x60, 0xc7, 0x91, 0x6b, 0xaf, 0x5f, 0xb5, 0xce, 0xdb, 0xd5, 0x6f, 0xf8, 0xff, 0x14, 0x00,
	0x00, 0xff, 0xff, 0xef, 0x94, 0x75, 0x7b, 0x96, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	TestMessage(ctx context.Context, in *common.TestRequest, opts ...grpc.CallOption) (*common.TestResponse, error)
	// Topic is responsible for creating new Topic(s) and filtered Topic data is returned.
	CreateTopic(ctx context.Context, in *common.TopicRequest, opts ...grpc.CallOption) (*common.TopicResponse, error)
	UpdateTopic(ctx context.Context, in *common.TopicRequest, opts ...grpc.CallOption) (*common.UpdateTopicResponse, error)
	DeleteTopic(ctx context.Context, in *common.DeleteTopicRequest, opts ...grpc.CallOption) (*common.DeleteTopicResponse, error)
	ListTopic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.DescribeTopicResponse, error)
	// Describes topic showing information about name, partition, owner_broker, replicas, producers, consumers
	DescribeTopic(ctx context.Context, in *common.DescribeTopicRequest, opts ...grpc.CallOption) (*common.DescribeTopicResponse, error)
	// Produce a message
	NewMessage(ctx context.Context, in *common.NewMessageRequest, opts ...grpc.CallOption) (*common.NewMessageResponse, error)
	// Retrieve a Message
	GetMessage(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.GetMessageResponse, error)
	// Acknowledge message has been received
	AckMessage(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.AckMessageResponse, error)
	// Peek message
	PeekMessage(ctx context.Context, in *common.PeekMessageRequest, opts ...grpc.CallOption) (*common.GetMessageResponse, error)
	// Consumer related
	SubscribeConsumer(ctx context.Context, opts ...grpc.CallOption) (Service_SubscribeConsumerClient, error)
	DescribeConsumer(ctx context.Context, in *common.DescribeConsumerRequest, opts ...grpc.CallOption) (*common.ConsumerResponse, error)
	GetConsumer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.ConsumerResponse, error)
	// Get consumer bookmark for a topic, consumer group
	GetConsumerOffset(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.GetConsumerOffsetResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) TestMessage(ctx context.Context, in *common.TestRequest, opts ...grpc.CallOption) (*common.TestResponse, error) {
	out := new(common.TestResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/TestMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateTopic(ctx context.Context, in *common.TopicRequest, opts ...grpc.CallOption) (*common.TopicResponse, error) {
	out := new(common.TopicResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTopic(ctx context.Context, in *common.TopicRequest, opts ...grpc.CallOption) (*common.UpdateTopicResponse, error) {
	out := new(common.UpdateTopicResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/UpdateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTopic(ctx context.Context, in *common.DeleteTopicRequest, opts ...grpc.CallOption) (*common.DeleteTopicResponse, error) {
	out := new(common.DeleteTopicResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListTopic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.DescribeTopicResponse, error) {
	out := new(common.DescribeTopicResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/ListTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DescribeTopic(ctx context.Context, in *common.DescribeTopicRequest, opts ...grpc.CallOption) (*common.DescribeTopicResponse, error) {
	out := new(common.DescribeTopicResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/DescribeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) NewMessage(ctx context.Context, in *common.NewMessageRequest, opts ...grpc.CallOption) (*common.NewMessageResponse, error) {
	out := new(common.NewMessageResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/NewMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetMessage(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.GetMessageResponse, error) {
	out := new(common.GetMessageResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AckMessage(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.AckMessageResponse, error) {
	out := new(common.AckMessageResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/AckMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PeekMessage(ctx context.Context, in *common.PeekMessageRequest, opts ...grpc.CallOption) (*common.GetMessageResponse, error) {
	out := new(common.GetMessageResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/PeekMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SubscribeConsumer(ctx context.Context, opts ...grpc.CallOption) (Service_SubscribeConsumerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/zbio.roost.service.Service/SubscribeConsumer", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceSubscribeConsumerClient{stream}
	return x, nil
}

type Service_SubscribeConsumerClient interface {
	Send(*common.ConsumerRequest) error
	Recv() (*common.ConsumerResponse, error)
	grpc.ClientStream
}

type serviceSubscribeConsumerClient struct {
	grpc.ClientStream
}

func (x *serviceSubscribeConsumerClient) Send(m *common.ConsumerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceSubscribeConsumerClient) Recv() (*common.ConsumerResponse, error) {
	m := new(common.ConsumerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) DescribeConsumer(ctx context.Context, in *common.DescribeConsumerRequest, opts ...grpc.CallOption) (*common.ConsumerResponse, error) {
	out := new(common.ConsumerResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/DescribeConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConsumer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.ConsumerResponse, error) {
	out := new(common.ConsumerResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/GetConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConsumerOffset(ctx context.Context, in *common.MessageRequest, opts ...grpc.CallOption) (*common.GetConsumerOffsetResponse, error) {
	out := new(common.GetConsumerOffsetResponse)
	err := c.cc.Invoke(ctx, "/zbio.roost.service.Service/GetConsumerOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	TestMessage(context.Context, *common.TestRequest) (*common.TestResponse, error)
	// Topic is responsible for creating new Topic(s) and filtered Topic data is returned.
	CreateTopic(context.Context, *common.TopicRequest) (*common.TopicResponse, error)
	UpdateTopic(context.Context, *common.TopicRequest) (*common.UpdateTopicResponse, error)
	DeleteTopic(context.Context, *common.DeleteTopicRequest) (*common.DeleteTopicResponse, error)
	ListTopic(context.Context, *empty.Empty) (*common.DescribeTopicResponse, error)
	// Describes topic showing information about name, partition, owner_broker, replicas, producers, consumers
	DescribeTopic(context.Context, *common.DescribeTopicRequest) (*common.DescribeTopicResponse, error)
	// Produce a message
	NewMessage(context.Context, *common.NewMessageRequest) (*common.NewMessageResponse, error)
	// Retrieve a Message
	GetMessage(context.Context, *common.MessageRequest) (*common.GetMessageResponse, error)
	// Acknowledge message has been received
	AckMessage(context.Context, *common.MessageRequest) (*common.AckMessageResponse, error)
	// Peek message
	PeekMessage(context.Context, *common.PeekMessageRequest) (*common.GetMessageResponse, error)
	// Consumer related
	SubscribeConsumer(Service_SubscribeConsumerServer) error
	DescribeConsumer(context.Context, *common.DescribeConsumerRequest) (*common.ConsumerResponse, error)
	GetConsumer(context.Context, *empty.Empty) (*common.ConsumerResponse, error)
	// Get consumer bookmark for a topic, consumer group
	GetConsumerOffset(context.Context, *common.MessageRequest) (*common.GetConsumerOffsetResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) TestMessage(ctx context.Context, req *common.TestRequest) (*common.TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestMessage not implemented")
}
func (*UnimplementedServiceServer) CreateTopic(ctx context.Context, req *common.TopicRequest) (*common.TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (*UnimplementedServiceServer) UpdateTopic(ctx context.Context, req *common.TopicRequest) (*common.UpdateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (*UnimplementedServiceServer) DeleteTopic(ctx context.Context, req *common.DeleteTopicRequest) (*common.DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (*UnimplementedServiceServer) ListTopic(ctx context.Context, req *empty.Empty) (*common.DescribeTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopic not implemented")
}
func (*UnimplementedServiceServer) DescribeTopic(ctx context.Context, req *common.DescribeTopicRequest) (*common.DescribeTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopic not implemented")
}
func (*UnimplementedServiceServer) NewMessage(ctx context.Context, req *common.NewMessageRequest) (*common.NewMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMessage not implemented")
}
func (*UnimplementedServiceServer) GetMessage(ctx context.Context, req *common.MessageRequest) (*common.GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedServiceServer) AckMessage(ctx context.Context, req *common.MessageRequest) (*common.AckMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckMessage not implemented")
}
func (*UnimplementedServiceServer) PeekMessage(ctx context.Context, req *common.PeekMessageRequest) (*common.GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeekMessage not implemented")
}
func (*UnimplementedServiceServer) SubscribeConsumer(srv Service_SubscribeConsumerServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeConsumer not implemented")
}
func (*UnimplementedServiceServer) DescribeConsumer(ctx context.Context, req *common.DescribeConsumerRequest) (*common.ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConsumer not implemented")
}
func (*UnimplementedServiceServer) GetConsumer(ctx context.Context, req *empty.Empty) (*common.ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumer not implemented")
}
func (*UnimplementedServiceServer) GetConsumerOffset(ctx context.Context, req *common.MessageRequest) (*common.GetConsumerOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerOffset not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_TestMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TestMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/TestMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TestMessage(ctx, req.(*common.TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateTopic(ctx, req.(*common.TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/UpdateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTopic(ctx, req.(*common.TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTopic(ctx, req.(*common.DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/ListTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListTopic(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DescribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DescribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/DescribeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DescribeTopic(ctx, req.(*common.DescribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_NewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).NewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/NewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).NewMessage(ctx, req.(*common.NewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetMessage(ctx, req.(*common.MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AckMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AckMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/AckMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AckMessage(ctx, req.(*common.MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PeekMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PeekMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PeekMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/PeekMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PeekMessage(ctx, req.(*common.PeekMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SubscribeConsumer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).SubscribeConsumer(&serviceSubscribeConsumerServer{stream})
}

type Service_SubscribeConsumerServer interface {
	Send(*common.ConsumerResponse) error
	Recv() (*common.ConsumerRequest, error)
	grpc.ServerStream
}

type serviceSubscribeConsumerServer struct {
	grpc.ServerStream
}

func (x *serviceSubscribeConsumerServer) Send(m *common.ConsumerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceSubscribeConsumerServer) Recv() (*common.ConsumerRequest, error) {
	m := new(common.ConsumerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_DescribeConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescribeConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DescribeConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/DescribeConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DescribeConsumer(ctx, req.(*common.DescribeConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/GetConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConsumer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConsumerOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConsumerOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbio.roost.service.Service/GetConsumerOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConsumerOffset(ctx, req.(*common.MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zbio.roost.service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestMessage",
			Handler:    _Service_TestMessage_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Service_CreateTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _Service_UpdateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _Service_DeleteTopic_Handler,
		},
		{
			MethodName: "ListTopic",
			Handler:    _Service_ListTopic_Handler,
		},
		{
			MethodName: "DescribeTopic",
			Handler:    _Service_DescribeTopic_Handler,
		},
		{
			MethodName: "NewMessage",
			Handler:    _Service_NewMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Service_GetMessage_Handler,
		},
		{
			MethodName: "AckMessage",
			Handler:    _Service_AckMessage_Handler,
		},
		{
			MethodName: "PeekMessage",
			Handler:    _Service_PeekMessage_Handler,
		},
		{
			MethodName: "DescribeConsumer",
			Handler:    _Service_DescribeConsumer_Handler,
		},
		{
			MethodName: "GetConsumer",
			Handler:    _Service_GetConsumer_Handler,
		},
		{
			MethodName: "GetConsumerOffset",
			Handler:    _Service_GetConsumerOffset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeConsumer",
			Handler:       _Service_SubscribeConsumer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
